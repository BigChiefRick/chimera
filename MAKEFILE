# Chimera Makefile
.PHONY: help build test clean install deps lint fmt vet integration-test docker

# Variables
BINARY_NAME=chimera
MAIN_PATH=./cmd
BUILD_DIR=./bin
VERSION=$(shell git describe --tags --always --dirty)
LDFLAGS=-ldflags "-X main.version=$(VERSION)"

# Default target
help: ## Show this help message
	@echo 'Usage: make <target>'
	@echo ''
	@echo 'Targets:'
	@awk 'BEGIN {FS = ":.*?## "} /^[a-zA-Z_-]+:.*?## / {printf "  %-15s %s\n", $$1, $$2}' $(MAKEFILE_LIST)

# Dependencies
deps: ## Download dependencies
	go mod download
	go mod tidy

# Build
build: deps ## Build the binary
	mkdir -p $(BUILD_DIR)
	go build $(LDFLAGS) -o $(BUILD_DIR)/$(BINARY_NAME) $(MAIN_PATH)

# Install
install: build ## Install the binary
	go install $(LDFLAGS) $(MAIN_PATH)

# Development
fmt: ## Format code
	go fmt ./...

vet: ## Run go vet
	go vet ./...

lint: ## Run golangci-lint
	golangci-lint run

# Testing
test: ## Run unit tests
	go test -v ./...

test-coverage: ## Run tests with coverage
	go test -v -coverprofile=coverage.out ./...
	go tool cover -html=coverage.out -o coverage.html

integration-test: ## Run integration tests
	@echo "Running Phase 1 integration tests..."
	@chmod +x scripts/test-integration.sh
	@scripts/test-integration.sh

# Setup
setup: ## Setup development environment
	@echo "Setting up Chimera development environment..."
	@if [ -f ".chimera-codespaces" ]; then \
		echo "üì¶ Detected Codespaces environment"; \
		go mod init github.com/BigChiefRick/chimera || true; \
	else \
		go mod init github.com/BigChiefRick/chimera || true; \
	fi
	$(MAKE) deps
	@echo "Installing development tools..."
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
	@if [ -f ".chimera-codespaces" ]; then \
		echo "üöÄ Codespaces environment ready!"; \
		echo "Run: ./scripts/codespaces.sh start"; \
	else \
		echo "Running integration test..."; \
		$(MAKE) integration-test; \
	fi

# Steampipe operations
steampipe-start: ## Start Steampipe service
	steampipe service start

steampipe-stop: ## Stop Steampipe service
	steampipe service stop

steampipe-install-plugins: ## Install common Steampipe plugins
	steampipe plugin install aws
	steampipe plugin install azure
	steampipe plugin install gcp
	steampipe plugin install kubernetes

# Terraformer operations
terraformer-test-aws: ## Test Terraformer with AWS
	@mkdir -p test-output/aws
	@cd test-output/aws && terraform init
	terraformer import aws --resources=vpc --regions=us-east-1 --path-output=test-output/aws

terraformer-test-azure: ## Test Terraformer with Azure
	@mkdir -p test-output/azure
	@cd test-output/azure && terraform init
	terraformer import azure --resources=virtual_network --path-output=test-output/azure

terraformer-test-gcp: ## Test Terraformer with GCP
	@mkdir -p test-output/gcp
	@cd test-output/gcp && terraform init
	terraformer import google --resources=networks --path-output=test-output/gcp

# Discovery tests
test-discovery-aws: steampipe-start ## Test discovery on AWS
	steampipe query "select name, vpc_id, region from aws_vpc limit 5"
	
test-discovery-azure: steampipe-start ## Test discovery on Azure
	steampipe query "select name, location from azure_resource_group limit 5"

test-discovery-gcp: steampipe-start ## Test discovery on GCP  
	steampipe query "select name, project_id from gcp_project limit 5"

test-discovery-all: steampipe-start ## Test discovery on all clouds
	@echo "Testing multi-cloud discovery..."
	steampipe query "select 'AWS' as provider, count(*) as vpcs from aws_vpc union all select 'Azure' as provider, count(*) from azure_resource_group union all select 'GCP' as provider, count(*) from gcp_project"

# Codespaces helpers
codespaces-start: ## Start Codespaces development environment
	@if [ -f ".chimera-codespaces" ]; then \
		./scripts/codespaces.sh start; \
	else \
		echo "‚ùå Not in Codespaces environment"; \
		echo "Run this in GitHub Codespaces or use: make steampipe-start"; \
	fi

codespaces-demo: ## Run Codespaces demo
	@if [ -f ".chimera-codespaces" ]; then \
		./scripts/codespaces.sh demo; \
	else \
		echo "‚ùå Not in Codespaces environment"; \
		$(MAKE) test; \
	fi

# Clean
clean: ## Clean build artifacts
	rm -rf $(BUILD_DIR)
	rm -rf test-output/
	rm -f coverage.out coverage.html
	go clean -cache
	go clean -modcache
